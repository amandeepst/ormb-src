/**
 * Generated by com.splwg.tools.artifactgen.ArtifactGenerator
 * Template: PersistentClass.vm
 * $File: //FW/4.0.1/Code/modules/tools/source/java/com/splwg/tools/artifactgen/templates/PersistentClass.vm $
 * $DateTime: 2009/12/17 11:38:59 $
 * $Revision: #1 $
 */
package com.splwg.cm.domain.wp.entity;


import java.math.BigInteger;
import com.splwg.base.api.datatypes.Id;
import com.splwg.base.support.api.FrameworkBusinessEntity;
import com.splwg.base.support.api.PersistenceStrategy;
import com.splwg.base.api.datatypes.Date;
import com.splwg.base.api.DataTransferObject;

import com.splwg.base.support.context.FrameworkSession;

/**
  * Generated persistent class for CmFtGlFxAccountingId
  *
  * @author Generated by splDev.artifactGenerator
  */
public class CmFtGlFxAccountingId_Per
                 extends CmFtGlFxAccountingId_Impl
                 implements com.splwg.cm.domain.wp.entity.CmFtGlFxAccountingId,
                            FrameworkBusinessEntity<com.splwg.cm.domain.wp.entity.CmFtGlFxAccountingId>
{ 
    /* simple persistent fields */
    private String glAccount;
    private Date accountingDate;
    private String fundCurrency;
    private String binSettlementCurrency;
    private String counterparty;
    private String businessUnit;
    private String batchControl;
    private BigInteger batchNumber;
    /* FK properties */
    /* optional FK properties */
   /* child collections */

    //~ Methods ------------------------------------------------------------------------------------------

    /**
     * Default constructor.
     */
    public CmFtGlFxAccountingId_Per () {
       storePersistentFreshnessInfo(this);
    }

    /* the prime key */
    /**
      * Get the id property
      *
      * @return the id
      */
        @Override
    public com.splwg.cm.domain.wp.entity.CmFtGlFxAccountingId_Id getId() {
        return (com.splwg.cm.domain.wp.entity.CmFtGlFxAccountingId_Id) getPrivateId();
    }

    public void setId(com.splwg.cm.domain.wp.entity.CmFtGlFxAccountingId_Id newId) {
        setPrivateId(newId);
    }

    /* simple persistent fields */
    /**
      * Get the glAccount property
      *
      * @return glAccount
      */
    @Override
    public String getGlAccount() {
        verifyFreshState();
        return glAccount;
    }
    public void setGlAccount(String value) {
        this.glAccount = value;
    }

    /**
      * Get the accountingDate property
      *
      * @return accountingDate
      */
    @Override
    public Date getAccountingDate() {
        verifyFreshState();
        return accountingDate;
    }
    public void setAccountingDate(Date value) {
        this.accountingDate = value;
    }

    /**
      * Get the fundCurrency property
      *
      * @return fundCurrency
      */
    @Override
    public String getFundCurrency() {
        verifyFreshState();
        return fundCurrency;
    }
    public void setFundCurrency(String value) {
        this.fundCurrency = value;
    }

    /**
      * Get the binSettlementCurrency property
      *
      * @return binSettlementCurrency
      */
    @Override
    public String getBinSettlementCurrency() {
        verifyFreshState();
        return binSettlementCurrency;
    }
    public void setBinSettlementCurrency(String value) {
        this.binSettlementCurrency = value;
    }

    /**
      * Get the counterparty property
      *
      * @return counterparty
      */
    @Override
    public String getCounterparty() {
        verifyFreshState();
        return counterparty;
    }
    public void setCounterparty(String value) {
        this.counterparty = value;
    }

    /**
      * Get the businessUnit property
      *
      * @return businessUnit
      */
    @Override
    public String getBusinessUnit() {
        verifyFreshState();
        return businessUnit;
    }
    public void setBusinessUnit(String value) {
        this.businessUnit = value;
    }

    /**
      * Get the batchControl property
      *
      * @return batchControl
      */
    @Override
    public String getBatchControl() {
        verifyFreshState();
        return batchControl;
    }
    public void setBatchControl(String value) {
        this.batchControl = value;
    }

    /**
      * Get the batchNumber property
      *
      * @return batchNumber
      */
    @Override
    public BigInteger getBatchNumber() {
        verifyFreshState();
        return batchNumber;
    }
    public void setBatchNumber(BigInteger value) {
        this.batchNumber = value;
    }


    /* FK properties */

    /* optional FK properties */


    /**
    * Set this object's fields from its corresponding data transfer object.
    * Accept a generic DTO, cast to my specific type.  Useful for framework code.
    *
    * @param dto the data transfer object
    */
    @Override
    public void setDTO(DataTransferObject<com.splwg.cm.domain.wp.entity.CmFtGlFxAccountingId> dto) {
        setDTOEtc(dto);
    }

    /**
      * Get the Data transfer object with this business entity's values
      *
      * @return a Data transfer object based upon this entity
      */
    @Override
    public com.splwg.cm.domain.wp.entity.CmFtGlFxAccountingId_DTO getDTO() {
        verifyFreshState();
        CmFtGlFxAccountingId_DTO dto = new CmFtGlFxAccountingId_DTO();
        dto.setId(getId());
    /* Simple fields */
        dto.setGlAccount(this.glAccount);
        dto.setAccountingDate(this.accountingDate);
        dto.setFundCurrency(this.fundCurrency);
        dto.setBinSettlementCurrency(this.binSettlementCurrency);
        dto.setCounterparty(this.counterparty);
        dto.setBusinessUnit(this.businessUnit);
        dto.setBatchControl(this.batchControl);
        dto.setBatchNumber(this.batchNumber);
        // version
        dto.setVersion(getVersion());

    /* Optional FKs */

    /* Many-to-ones */


        return dto;
    }
    /**
      * @see com.splwg.base.api.BusinessEntity#entityName()
      */
    @Override
    public String entityName() {
        return "cmFtGlFxAccountingId";
    }




     /**
     * @see  com.splwg.base.api.PersistentEntity#delete()
     */
    @Override
    public void delete() {
        executeDelete();
    }

    /**
     * @see com.splwg.base.support.api.FrameworkBusinessEntity
     */
    @Override
    public DataTransferObject<com.splwg.cm.domain.wp.entity.CmFtGlFxAccountingId> setAbstractDTOValues(DataTransferObject<com.splwg.cm.domain.wp.entity.CmFtGlFxAccountingId> newDto) {
        com.splwg.cm.domain.wp.entity.CmFtGlFxAccountingId_DTO dto = (com.splwg.cm.domain.wp.entity.CmFtGlFxAccountingId_DTO) newDto;
        Id id = getPrivateId();
        boolean beingAdded = id == null || id.isNull();

        verifyFreshState();

        // set the oldDTO value used for change handler processing
        com.splwg.cm.domain.wp.entity.CmFtGlFxAccountingId_DTO oldDTO = null;
        FrameworkSession frameworkSession = (FrameworkSession) getSession();
        if (!beingAdded){
            // this is a change
            if (! frameworkSession.isChangeHandlingDisabled()) {
                oldDTO = getDTO();
            }
        }
        PersistenceStrategy persistenceStrategy = getPersistenceStrategy();
        privateSetAbstractDTOValuesMiddle(beingAdded, com.splwg.cm.domain.wp.entity.CmFtGlFxAccountingId_Id.NULL, dto, persistenceStrategy);

        Id proposedId = dto.getId();
        if (persistenceStrategy.shouldSetInternalValuesFromSetDto()){
            id = proposedId == null || proposedId.isNull() ? null : proposedId;
            setPrivateId(id);


            /* Simple fields */
            this.glAccount = dto.getGlAccount();
            this.accountingDate = dto.getAccountingDate();
            this.fundCurrency = dto.getFundCurrency();
            this.binSettlementCurrency = dto.getBinSettlementCurrency();
            this.counterparty = dto.getCounterparty();
            this.businessUnit = dto.getBusinessUnit();
            this.batchControl = dto.getBatchControl();
            this.batchNumber = dto.getBatchNumber();

            /* Optional FKs */

        /* Many-to-ones */

            // version
            touchVersion(dto.getVersion());
        }
        return oldDTO;
    }

}
