/**
 * Generated by com.splwg.tools.artifactgen.ArtifactGenerator
 * Template: AlgorithmComponentGenClass.vm
 * $File: //FW/4.0.1/Code/modules/tools/source/java/com/splwg/tools/artifactgen/templates/AlgorithmComponentGenClass.vm $
 * $DateTime: 2009/12/17 11:38:59 $
 * $Revision: #1 $
 */
package com.splwg.cm.domain.wp.algorithm;

import com.splwg.base.support.algorithm.AbstractAlgorithmComponent;
import com.splwg.base.domain.common.characteristicType.CharacteristicType_Id;
import com.splwg.base.domain.common.characteristicType.CharacteristicType;

/**
  * Generated super class for the taxAmountCalculation algorithm component
  *
  * @author Generated by com.splwg.tools.artifactgen.ArtifactGenerator
  */
public abstract class TaxAmountCalculation_Gen extends AbstractAlgorithmComponent
         implements TaxAmountCalculation
{

    public final CharacteristicType getTaxRateCharacteristictypeCode () {
        String idValue = getSoftParameter(0);
	        if (idValue == null) reportRequiredParameter("TaxRateCharacteristictypeCode",0);
	        CharacteristicType_Id id = new CharacteristicType_Id(idValue);
        CharacteristicType TaxRateCharacteristictypeCode = id.getEntity();
	        validateSoftEntityExists("TaxRateCharacteristictypeCode",0 ,id, TaxRateCharacteristictypeCode);
	        return TaxRateCharacteristictypeCode;
    }

    public final CharacteristicType getTaxRegimeCharacteristictypeCode () {
        String idValue = getSoftParameter(1);
	        if (idValue == null) reportRequiredParameter("TaxRegimeCharacteristictypeCode",1);
	        CharacteristicType_Id id = new CharacteristicType_Id(idValue);
        CharacteristicType TaxRegimeCharacteristictypeCode = id.getEntity();
	        validateSoftEntityExists("TaxRegimeCharacteristictypeCode",1 ,id, TaxRegimeCharacteristictypeCode);
	        return TaxRegimeCharacteristictypeCode;
    }

    public final CharacteristicType getBillCalculationLineTypeCharacteristictypeCode () {
        String idValue = getSoftParameter(2);
	        if (idValue == null) reportRequiredParameter("BillCalculationLineTypeCharacteristictypeCode",2);
	        CharacteristicType_Id id = new CharacteristicType_Id(idValue);
        CharacteristicType BillCalculationLineTypeCharacteristictypeCode = id.getEntity();
	        validateSoftEntityExists("BillCalculationLineTypeCharacteristictypeCode",2 ,id, BillCalculationLineTypeCharacteristictypeCode);
	        return BillCalculationLineTypeCharacteristictypeCode;
    }

    public final String getTaxDistributionCode () {
	    String result = getSoftParameter(3);
		if (result == null) reportRequiredParameter("TaxDistributionCode",3);
	    return result;
    }

    public final String getTaxAgencyCode () {
	    String result = getSoftParameter(4);
		if (result == null) reportRequiredParameter("taxAgencyCode",4);
	    return result;
    }

    public final CharacteristicType getTaxScopeCharacteristictypeCode () {
        String idValue = getSoftParameter(5);
	        if (idValue == null) reportRequiredParameter("TaxScopeCharacteristictypeCode",5);
	        CharacteristicType_Id id = new CharacteristicType_Id(idValue);
        CharacteristicType TaxScopeCharacteristictypeCode = id.getEntity();
	        validateSoftEntityExists("TaxScopeCharacteristictypeCode",5 ,id, TaxScopeCharacteristictypeCode);
	        return TaxScopeCharacteristictypeCode;
    }

    public final String getOutOfScope () {
	    String result = getSoftParameter(6);
		if (result == null) reportRequiredParameter("outOfScope",6);
	    return result;
    }

    public final String getReverseCharge () {
	    String result = getSoftParameter(7);
		if (result == null) reportRequiredParameter("reverseCharge",7);
	    return result;
    }

    protected final void validateParameterTypes() {
        getTaxRateCharacteristictypeCode();
        getTaxRegimeCharacteristictypeCode();
        getBillCalculationLineTypeCharacteristictypeCode();
        getTaxDistributionCode();
        getTaxAgencyCode();
        getTaxScopeCharacteristictypeCode();
        getOutOfScope();
        getReverseCharge();

    }
   

}
