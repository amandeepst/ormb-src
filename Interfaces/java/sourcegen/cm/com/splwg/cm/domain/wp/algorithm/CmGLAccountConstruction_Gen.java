/**
 * Generated by com.splwg.tools.artifactgen.ArtifactGenerator
 * Template: AlgorithmComponentGenClass.vm
 * $File: //FW/4.0.1/Code/modules/tools/source/java/com/splwg/tools/artifactgen/templates/AlgorithmComponentGenClass.vm $
 * $DateTime: 2009/12/17 11:38:59 $
 * $Revision: #1 $
 */
package com.splwg.cm.domain.wp.algorithm;

import com.splwg.base.support.algorithm.AbstractAlgorithmComponent;
	import com.splwg.base.domain.common.characteristicType.CharacteristicType_Id;
import com.splwg.base.domain.common.characteristicType.CharacteristicType;
	import com.splwg.ccb.domain.admin.idType.accountIdType.AccountNumberType_Id;
import com.splwg.ccb.domain.admin.idType.accountIdType.AccountNumberType;

/**
  * Generated super class for the cmGLAccountConstruction algorithm component
  *
  * @author Generated by com.splwg.tools.artifactgen.ArtifactGenerator
  */
public abstract class CmGLAccountConstruction_Gen extends AbstractAlgorithmComponent
         implements CmGLAccountConstruction
{

    public final String getTaxDistributionCode () {
	    String result = getSoftParameter(0);
		if (result == null) reportRequiredParameter("taxDistributionCode",0);
	    return result;
    }

    public final CharacteristicType getTaxGLAccountCharType () {
        String idValue = getSoftParameter(1);
	        if (idValue == null) reportRequiredParameter("taxGLAccountCharType",1);
	        CharacteristicType_Id id = new CharacteristicType_Id(idValue);
        CharacteristicType taxGLAccountCharType = id.getEntity();
	        validateSoftEntityExists("taxGLAccountCharType",1 ,id, taxGLAccountCharType);
	        return taxGLAccountCharType;
    }

    public final CharacteristicType getOverrideDistributionCodeCharType () {
        String idValue = getSoftParameter(2);
	        if (idValue == null) reportRequiredParameter("overrideDistributionCodeCharType",2);
	        CharacteristicType_Id id = new CharacteristicType_Id(idValue);
        CharacteristicType overrideDistributionCodeCharType = id.getEntity();
	        validateSoftEntityExists("overrideDistributionCodeCharType",2 ,id, overrideDistributionCodeCharType);
	        return overrideDistributionCodeCharType;
    }

    public final String getIdType () {
	    String result = getSoftParameter(3);
		if (result == null) reportRequiredParameter("idType",3);
	    return result;
    }

    public final CharacteristicType getCounterPartyCharType () {
        String idValue = getSoftParameter(4);
	        if (idValue == null) reportRequiredParameter("counterPartyCharType",4);
	        CharacteristicType_Id id = new CharacteristicType_Id(idValue);
        CharacteristicType counterPartyCharType = id.getEntity();
	        validateSoftEntityExists("counterPartyCharType",4 ,id, counterPartyCharType);
	        return counterPartyCharType;
    }

    public final CharacteristicType getIntercompanyCharType () {
        String idValue = getSoftParameter(5);
	        if (idValue == null) reportRequiredParameter("intercompanyCharType",5);
	        CharacteristicType_Id id = new CharacteristicType_Id(idValue);
        CharacteristicType intercompanyCharType = id.getEntity();
	        validateSoftEntityExists("intercompanyCharType",5 ,id, intercompanyCharType);
	        return intercompanyCharType;
    }

    public final String getIntercompanyCharValue () {
	    String result = getSoftParameter(6);
		if (result == null) reportRequiredParameter("intercompanyCharValue",6);
	    return result;
    }

    public final CharacteristicType getBusinessUnitCharType () {
        String idValue = getSoftParameter(7);
	        if (idValue == null) reportRequiredParameter("businessUnitCharType",7);
	        CharacteristicType_Id id = new CharacteristicType_Id(idValue);
        CharacteristicType businessUnitCharType = id.getEntity();
	        validateSoftEntityExists("businessUnitCharType",7 ,id, businessUnitCharType);
	        return businessUnitCharType;
    }

    public final CharacteristicType getSchemeCharType () {
        String idValue = getSoftParameter(8);
	        if (idValue == null) reportRequiredParameter("schemeCharType",8);
	        CharacteristicType_Id id = new CharacteristicType_Id(idValue);
        CharacteristicType schemeCharType = id.getEntity();
	        validateSoftEntityExists("schemeCharType",8 ,id, schemeCharType);
	        return schemeCharType;
    }

    public final AccountNumberType getFundAccountNumberType () {
        String idValue = getSoftParameter(9);
	        if (idValue == null) reportRequiredParameter("fundAccountNumberType",9);
	        AccountNumberType_Id id = new AccountNumberType_Id(idValue);
        AccountNumberType fundAccountNumberType = id.getEntity();
	        validateSoftEntityExists("fundAccountNumberType",9 ,id, fundAccountNumberType);
	        return fundAccountNumberType;
    }

    public final String getFundAccountNumber () {
	    String result = getSoftParameter(10);
		if (result == null) reportRequiredParameter("fundAccountNumber",10);
	    return result;
    }

    public final String getFundGLAccount () {
	    String result = getSoftParameter(11);
		if (result == null) reportRequiredParameter("fundGLAccount",11);
	    return result;
    }

    public final String getPayType () {
	    String result = getSoftParameter(12);
		if (result == null) reportRequiredParameter("payType",12);
	    return result;
    }

    public final String getNegGlAccount () {
	    String result = getSoftParameter(13);
		if (result == null) reportRequiredParameter("negGlAccount",13);
	    return result;
    }

    public final String getDstCdForDebtFund () {
	    String result = getSoftParameter(14);
		if (result == null) reportRequiredParameter("dstCdForDebtFund",14);
	    return result;
    }

    protected final void validateParameterTypes() {
        getTaxDistributionCode();
        getTaxGLAccountCharType();
        getOverrideDistributionCodeCharType();
        getIdType();
        getCounterPartyCharType();
        getIntercompanyCharType();
        getIntercompanyCharValue();
        getBusinessUnitCharType();
        getSchemeCharType();
        getFundAccountNumberType();
        getFundAccountNumber();
        getFundGLAccount();
        getPayType();
        getNegGlAccount();
        getDstCdForDebtFund();

    }
   

}
