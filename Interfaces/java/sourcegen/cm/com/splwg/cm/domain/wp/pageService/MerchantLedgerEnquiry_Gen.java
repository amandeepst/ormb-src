/**
 * Generated by com.splwg.tools.artifactgen.ArtifactGenerator
 * Template: Maintenance.vm
 * $File: //FW/4.0.1/Code/modules/tools/source/java/com/splwg/tools/artifactgen/templates/Maintenance.vm $
 * $DateTime: 2009/12/17 11:38:59 $
 * $Revision: #1 $
 */
package com.splwg.cm.domain.wp.pageService;

import com.splwg.base.api.service.DataElement;
import com.splwg.shared.environ.DataElementDefinition;
import com.splwg.shared.environ.ListDefinition;
import com.splwg.base.api.datatypes.EntityId;
import com.splwg.base.api.DataTransferObject;
import com.splwg.base.api.service.ListLastInfo;


import java.util.Map;   
import com.splwg.base.api.SimpleEntityList;
import com.splwg.base.api.service.ItemList; 
import com.splwg.base.api.BindableQuery;
import com.splwg.shared.environ.ServiceListConstant;
 import com.splwg.base.api.BusinessEntity;

abstract class MerchantLedgerEnquiry_Gen 
       extends  com.splwg.base.support.pagemaintenance.QueryPageMaintenance {

     public interface STRUCTURE {

         interface HEADER {
              static com.splwg.base.support.service.constants.StringHeaderField PER_ID_NBR = new com.splwg.base.support.service.constants.StringHeaderField("PER_ID_NBR");
              static com.splwg.base.support.service.constants.StringHeaderField CIS_DIVISION = new com.splwg.base.support.service.constants.StringHeaderField("CIS_DIVISION");
              static com.splwg.base.support.service.constants.CurrencyHeaderField CURRENCY_CD = new com.splwg.base.support.service.constants.CurrencyHeaderField("CURRENCY_CD");
              static com.splwg.base.support.service.constants.StringHeaderField ACCT_NBR = new com.splwg.base.support.service.constants.StringHeaderField("ACCT_NBR");
              static com.splwg.base.support.service.constants.StringHeaderField DESCR = new com.splwg.base.support.service.constants.StringHeaderField("DESCR");
              static com.splwg.base.support.service.constants.LookupHeaderField<com.splwg.ccb.api.lookup.BillStatusLookup,com.splwg.ccb.api.lookup.BillStatusLookup> BILL_STAT_FLG = new com.splwg.base.support.service.constants.LookupHeaderField<com.splwg.ccb.api.lookup.BillStatusLookup,com.splwg.ccb.api.lookup.BillStatusLookup>("BILL_STAT_FLG");
              static com.splwg.base.support.service.constants.DateHeaderField START_DATE = new com.splwg.base.support.service.constants.DateHeaderField("START_DATE");
              static com.splwg.base.support.service.constants.DateHeaderField END_DATE = new com.splwg.base.support.service.constants.DateHeaderField("END_DATE");
              static com.splwg.base.support.service.constants.StringHeaderField NUM1 = new com.splwg.base.support.service.constants.StringHeaderField("NUM1");
        }

        static com.splwg.base.support.service.constants.StringField ERROR_MSG = new com.splwg.base.support.service.constants.StringField("ERROR_MSG");
        static com.splwg.base.support.service.constants.StringField PER_ID_NBR = new com.splwg.base.support.service.constants.StringField("PER_ID_NBR");
        static com.splwg.base.support.service.constants.StringField STATUS = new com.splwg.base.support.service.constants.StringField("STATUS");

        interface list_Account {
            static ServiceListConstant name = new ServiceListConstant("Account");
            static com.splwg.base.support.service.constants.StringField ACCT_ID = new com.splwg.base.support.service.constants.StringField("ACCT_ID");
            static com.splwg.base.support.service.constants.StringField DESCR = new com.splwg.base.support.service.constants.StringField("DESCR");
        }
        interface list_Contract {
            static ServiceListConstant name = new ServiceListConstant("Contract");
            static com.splwg.base.support.service.constants.CurrencyField CURRENCY_CD = new com.splwg.base.support.service.constants.CurrencyField("CURRENCY_CD");
            static com.splwg.base.support.service.constants.MoneyField CUR_AMT = new com.splwg.base.support.service.constants.MoneyField("CUR_AMT");
            static com.splwg.base.support.service.constants.StringField SA_ID = new com.splwg.base.support.service.constants.StringField("SA_ID");
            static com.splwg.base.support.service.constants.StringField SA_TYPE_CD = new com.splwg.base.support.service.constants.StringField("SA_TYPE_CD");
        }
        interface list_Currency {
            static ServiceListConstant name = new ServiceListConstant("Currency");
        }
        interface list_Division {
            static ServiceListConstant name = new ServiceListConstant("Division");
            static com.splwg.base.support.service.constants.StringField CIS_DIVISION = new com.splwg.base.support.service.constants.StringField("CIS_DIVISION");
        }
        interface list_FinancialDocument {
            static ServiceListConstant name = new ServiceListConstant("FinancialDocument");
            static com.splwg.base.support.service.constants.StringField ALT_BILL_ID = new com.splwg.base.support.service.constants.StringField("ALT_BILL_ID");
            static com.splwg.base.support.service.constants.StringField BANKING_ENTRY_STATUS = new com.splwg.base.support.service.constants.StringField("BANKING_ENTRY_STATUS");
            static com.splwg.base.support.service.constants.StringField BANK_ENTRY_EVENT_ID = new com.splwg.base.support.service.constants.StringField("BANK_ENTRY_EVENT_ID");
            static com.splwg.base.support.service.constants.DateField BILL_DT = new com.splwg.base.support.service.constants.DateField("BILL_DT");
            static com.splwg.base.support.service.constants.StringField BILL_ID = new com.splwg.base.support.service.constants.StringField("BILL_ID");
            static com.splwg.base.support.service.constants.StringField CIS_DIVISION = new com.splwg.base.support.service.constants.StringField("CIS_DIVISION");
            static com.splwg.base.support.service.constants.CurrencyField CURRENCY_CD = new com.splwg.base.support.service.constants.CurrencyField("CURRENCY_CD");
            static com.splwg.base.support.service.constants.MoneyField CUR_AMT = new com.splwg.base.support.service.constants.MoneyField("CUR_AMT");
            static com.splwg.base.support.service.constants.DateField DUE_DT = new com.splwg.base.support.service.constants.DateField("DUE_DT");
            static com.splwg.base.support.service.constants.DateField END_DT = new com.splwg.base.support.service.constants.DateField("END_DT");
            static com.splwg.base.support.service.constants.MoneyField LINE_AMT = new com.splwg.base.support.service.constants.MoneyField("LINE_AMT");
            static com.splwg.base.support.service.constants.StringField LINE_ID = new com.splwg.base.support.service.constants.StringField("LINE_ID");
            static com.splwg.base.support.service.constants.StringField NUM1 = new com.splwg.base.support.service.constants.StringField("NUM1");
            static com.splwg.base.support.service.constants.StringField SA_TYPE_CD = new com.splwg.base.support.service.constants.StringField("SA_TYPE_CD");
            static com.splwg.base.support.service.constants.DateField START_DT = new com.splwg.base.support.service.constants.DateField("START_DT");
            static com.splwg.base.support.service.constants.MoneyField UNPAID_AMT = new com.splwg.base.support.service.constants.MoneyField("UNPAID_AMT");
        }
        interface list_MerchantLdgAcct {
            static ServiceListConstant name = new ServiceListConstant("MerchantLdgAcct");
            static com.splwg.base.support.service.constants.MoneyField CUR_AMT = new com.splwg.base.support.service.constants.MoneyField("CUR_AMT");
        }
    }

     public interface DEFAULTS {
        // no defaults
    }








    @Override
    final protected void afterPopulateElement(DataElement targetElement, String listName, BusinessEntity sourceEntity) {
	        if ("Account".equals(listName)) {
            afterPopulateElement_Account (targetElement, sourceEntity);
            return;
        }
	        if ("Contract".equals(listName)) {
            afterPopulateElement_Contract (targetElement, sourceEntity);
            return;
        }
	        if ("Currency".equals(listName)) {
            afterPopulateElement_Currency (targetElement, sourceEntity);
            return;
        }
	        if ("Division".equals(listName)) {
            afterPopulateElement_Division (targetElement, sourceEntity);
            return;
        }
	        if ("FinancialDocument".equals(listName)) {
            afterPopulateElement_FinancialDocument (targetElement, sourceEntity);
            return;
        }
	        if ("MerchantLdgAcct".equals(listName)) {
            afterPopulateElement_MerchantLdgAcct (targetElement, sourceEntity);
            return;
        }
        invalidList(listName);
    }

    @Override
    final protected void beforeChangeElement(DataElement element, String listName, DataTransferObject sourceDto, BusinessEntity originalEntity) {
        if ("Account".equals(listName)) {
            beforeChangeElement_Account (element, sourceDto, originalEntity);
            return;
        }
        if ("Contract".equals(listName)) {
            beforeChangeElement_Contract (element, sourceDto, originalEntity);
            return;
        }
        if ("Currency".equals(listName)) {
            beforeChangeElement_Currency (element, sourceDto, originalEntity);
            return;
        }
        if ("Division".equals(listName)) {
            beforeChangeElement_Division (element, sourceDto, originalEntity);
            return;
        }
        if ("FinancialDocument".equals(listName)) {
            beforeChangeElement_FinancialDocument (element, sourceDto, originalEntity);
            return;
        }
        if ("MerchantLdgAcct".equals(listName)) {
            beforeChangeElement_MerchantLdgAcct (element, sourceDto, originalEntity);
            return;
        }
        invalidList(listName);
    }

    @Override
    final protected void beforeAddElement(DataElement sourceElement, String listName, DataTransferObject newDto) {
        if ("Account".equals(listName)) {
            beforeAddElement_Account (sourceElement, newDto);
            return;
        }
        if ("Contract".equals(listName)) {
            beforeAddElement_Contract (sourceElement, newDto);
            return;
        }
        if ("Currency".equals(listName)) {
            beforeAddElement_Currency (sourceElement, newDto);
            return;
        }
        if ("Division".equals(listName)) {
            beforeAddElement_Division (sourceElement, newDto);
            return;
        }
        if ("FinancialDocument".equals(listName)) {
            beforeAddElement_FinancialDocument (sourceElement, newDto);
            return;
        }
        if ("MerchantLdgAcct".equals(listName)) {
            beforeAddElement_MerchantLdgAcct (sourceElement, newDto);
            return;
        }
        invalidList(listName);
    }

    @Override
    final protected void afterChangeElement(DataElement element, String listName, BusinessEntity entity) {
        if ("Account".equals(listName)) {
            afterChangeElement_Account (element, entity);
            return;
        }
        if ("Contract".equals(listName)) {
            afterChangeElement_Contract (element, entity);
            return;
        }
        if ("Currency".equals(listName)) {
            afterChangeElement_Currency (element, entity);
            return;
        }
        if ("Division".equals(listName)) {
            afterChangeElement_Division (element, entity);
            return;
        }
        if ("FinancialDocument".equals(listName)) {
            afterChangeElement_FinancialDocument (element, entity);
            return;
        }
        if ("MerchantLdgAcct".equals(listName)) {
            afterChangeElement_MerchantLdgAcct (element, entity);
            return;
        }
        invalidList(listName);
    }

    @Override
    final protected void afterAddElement(DataElement sourceElement, String listName, BusinessEntity targetEntity) {
        if ("Account".equals(listName)) {
            afterAddElement_Account (sourceElement, targetEntity);
            return;
        }
        if ("Contract".equals(listName)) {
            afterAddElement_Contract (sourceElement, targetEntity);
            return;
        }
        if ("Currency".equals(listName)) {
            afterAddElement_Currency (sourceElement, targetEntity);
            return;
        }
        if ("Division".equals(listName)) {
            afterAddElement_Division (sourceElement, targetEntity);
            return;
        }
        if ("FinancialDocument".equals(listName)) {
            afterAddElement_FinancialDocument (sourceElement, targetEntity);
            return;
        }
        if ("MerchantLdgAcct".equals(listName)) {
            afterAddElement_MerchantLdgAcct (sourceElement, targetEntity);
            return;
        }
        invalidList(listName);
    }

    @Override
    final protected void aboutToDeleteElement(DataElement sourceElement, String listName, EntityId targetId) {
        if ("Account".equals(listName)) {
            aboutToDeleteElement_Account (sourceElement, targetId);
            return;
        }
        if ("Contract".equals(listName)) {
            aboutToDeleteElement_Contract (sourceElement, targetId);
            return;
        }
        if ("Currency".equals(listName)) {
            aboutToDeleteElement_Currency (sourceElement, targetId);
            return;
        }
        if ("Division".equals(listName)) {
            aboutToDeleteElement_Division (sourceElement, targetId);
            return;
        }
        if ("FinancialDocument".equals(listName)) {
            aboutToDeleteElement_FinancialDocument (sourceElement, targetId);
            return;
        }
        if ("MerchantLdgAcct".equals(listName)) {
            aboutToDeleteElement_MerchantLdgAcct (sourceElement, targetId);
            return;
        }
        invalidList(listName);
    }

    @Override
    final protected void afterPopulateList(String listName, ItemList<DataElement> targetList, SimpleEntityList sourceList,
                                   BusinessEntity sourceListParent) {
        if ("Account".equals(listName)) {
            afterPopulateList_Account (targetList, sourceList, sourceListParent);
            	return;
        }
        if ("Contract".equals(listName)) {
            afterPopulateList_Contract (targetList, sourceList, sourceListParent);
            	return;
        }
        if ("Currency".equals(listName)) {
            afterPopulateList_Currency (targetList, sourceList, sourceListParent);
            	return;
        }
        if ("Division".equals(listName)) {
            afterPopulateList_Division (targetList, sourceList, sourceListParent);
            	return;
        }
        if ("FinancialDocument".equals(listName)) {
            afterPopulateList_FinancialDocument (targetList, sourceList, sourceListParent);
            	return;
        }
        if ("MerchantLdgAcct".equals(listName)) {
            afterPopulateList_MerchantLdgAcct (targetList, sourceList, sourceListParent);
            	return;
        }
        invalidList(listName);
    }

    @Override
    final protected void bindListQuery(String listName, BindableQuery query, BusinessEntity parentEntity) {
        if ("Account".equals(listName)) {
            bindListQuery_Account (query, parentEntity);
            return;
        }
        if ("Contract".equals(listName)) {
            bindListQuery_Contract (query, parentEntity);
            return;
        }
        if ("Currency".equals(listName)) {
            bindListQuery_Currency (query, parentEntity);
            return;
        }
        if ("Division".equals(listName)) {
            bindListQuery_Division (query, parentEntity);
            return;
        }
        if ("FinancialDocument".equals(listName)) {
            bindListQuery_FinancialDocument (query, parentEntity);
            return;
        }
        if ("MerchantLdgAcct".equals(listName)) {
            bindListQuery_MerchantLdgAcct (query, parentEntity);
            return;
        }
        invalidList(listName);
    }


    @Override
    final protected void copyList(BusinessEntity originalOwner, BusinessEntity newOwner, Map<String, Object> parentIdFields,
                            ListDefinition listDef, String listName) {
        if ("Account".equals(listName)) {
            copyList_Account (originalOwner, newOwner, parentIdFields, listDef);
            return;
        }
        if ("Contract".equals(listName)) {
            copyList_Contract (originalOwner, newOwner, parentIdFields, listDef);
            return;
        }
        if ("Currency".equals(listName)) {
            copyList_Currency (originalOwner, newOwner, parentIdFields, listDef);
            return;
        }
        if ("Division".equals(listName)) {
            copyList_Division (originalOwner, newOwner, parentIdFields, listDef);
            return;
        }
        if ("FinancialDocument".equals(listName)) {
            copyList_FinancialDocument (originalOwner, newOwner, parentIdFields, listDef);
            return;
        }
        if ("MerchantLdgAcct".equals(listName)) {
            copyList_MerchantLdgAcct (originalOwner, newOwner, parentIdFields, listDef);
            return;
        }
        invalidList(listName);
    }

    @Override
    final protected <E extends BusinessEntity> E copyEntity(E original, Map<String, Object> newIdFields, EntityId<E> newId,
                                        DataElementDefinition childDefinition, String listName) {
        if ("Account".equals(listName)) {
            return copyEntity_Account (original, newIdFields, newId, childDefinition);
        }
        if ("Contract".equals(listName)) {
            return copyEntity_Contract (original, newIdFields, newId, childDefinition);
        }
        if ("Currency".equals(listName)) {
            return copyEntity_Currency (original, newIdFields, newId, childDefinition);
        }
        if ("Division".equals(listName)) {
            return copyEntity_Division (original, newIdFields, newId, childDefinition);
        }
        if ("FinancialDocument".equals(listName)) {
            return copyEntity_FinancialDocument (original, newIdFields, newId, childDefinition);
        }
        if ("MerchantLdgAcct".equals(listName)) {
            return copyEntity_MerchantLdgAcct (original, newIdFields, newId, childDefinition);
        }
        invalidList(listName);
        return null;
    }    

	    @Override
    final protected void afterSaveList(String listName, ItemList<DataElement> sourceList, SimpleEntityList entityList,
                                 BusinessEntity parentEntity) {
        if ("Contract".equals(listName)) {
            afterSaveList_Contract (sourceList, entityList, parentEntity);
            return;
        }
        invalidList(listName);
    }

    @Override
    final protected void createList(ItemList<DataElement> itemList, DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition elementDef, ListLastInfo lastInfo) {
        String listName = itemList.getName();
        if ("Account".equals(listName)) {
            createList_Account (itemList, sourceParentElement,  sourceParentEntity, elementDef, lastInfo);
            return;
        }
        if ("Currency".equals(listName)) {
            createList_Currency (itemList, sourceParentElement,  sourceParentEntity, elementDef, lastInfo);
            return;
        }
        if ("Division".equals(listName)) {
            createList_Division (itemList, sourceParentElement,  sourceParentEntity, elementDef, lastInfo);
            return;
        }
        if ("FinancialDocument".equals(listName)) {
            createList_FinancialDocument (itemList, sourceParentElement,  sourceParentEntity, elementDef, lastInfo);
            return;
        }
        if ("MerchantLdgAcct".equals(listName)) {
            createList_MerchantLdgAcct (itemList, sourceParentElement,  sourceParentEntity, elementDef, lastInfo);
            return;
        }
        invalidList(listName);
    }

    @Override
    final protected void saveList(String listName, DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition childElementDef, ItemList<DataElement> theList) {
        if ("Account".equals(listName)) {
            saveList_Account (sourceParentElement, sourceParentEntity, childElementDef, theList);
            return;
        }
        if ("Currency".equals(listName)) {
            saveList_Currency (sourceParentElement, sourceParentEntity, childElementDef, theList);
            return;
        }
        if ("Division".equals(listName)) {
            saveList_Division (sourceParentElement, sourceParentEntity, childElementDef, theList);
            return;
        }
        if ("FinancialDocument".equals(listName)) {
            saveList_FinancialDocument (sourceParentElement, sourceParentEntity, childElementDef, theList);
            return;
        }
        if ("MerchantLdgAcct".equals(listName)) {
            saveList_MerchantLdgAcct (sourceParentElement, sourceParentEntity, childElementDef, theList);
            return;
        }
        invalidList(listName);
    }



     /*
      * Methods for handling list Account
      */

      /**
        * Process a list after it has been read
        * @param targetList the itemList of rows going to the client
        * @param sourceList the complete source list as read
        * @param sourceListParent the owning parent entity (or null if doesn't exist)
        */
      protected void afterPopulateList_Account (ItemList<DataElement> targetList, SimpleEntityList sourceList,
                                    BusinessEntity sourceListParent) {
          // empty
      }



      protected void copyList_Account (BusinessEntity originalOwner, BusinessEntity newOwner, Map<String, Object> parentIdFields,
                            ListDefinition listDef) {
            privateCopyList(originalOwner, newOwner, parentIdFields, listDef);
      }



      /**
        * Process a list element after it has been read
        * @param targetElement the data element being populated for the client
        * @param sourceEntity the matching persistent entity
        */
      protected void afterPopulateElement_Account (DataElement targetElement, BusinessEntity sourceEntity) {
	          // empty
	      }

      /**
        * Process a list element before it will be changed
        * @param sourceElement the data element from the client
        * @param changedDto the changed DTO 
        * @param originalEntity the matching persistent entity
        */
      protected void beforeChangeElement_Account (DataElement sourceElement, DataTransferObject changedDto, BusinessEntity originalEntity) {
	          // empty
	      }

      /**
        * Process a list element before it will be added
        * @param sourceElement the data element from the client
        * @param newDto the new DTO
        */
      protected void beforeAddElement_Account (DataElement sourceElement, DataTransferObject newDto) {      
	          // empty
	      }

      /**
        * Process a list element after it has been changed
        * @param sourceElement the data element from the client
        * @param targetEntity the matching persistent entity
        */
      protected void afterChangeElement_Account (DataElement sourceElement, BusinessEntity targetEntity) {
	          // empty
	      }

      /**
        * Process a list element after it has been added
        * @param sourceElement the data element from the client
        * @param targetEntity the matching persistent entity
        */
      protected void afterAddElement_Account (DataElement sourceElement, BusinessEntity targetEntity) {      
	          // empty
	      }

      protected <E extends BusinessEntity> E copyEntity_Account (E original, Map<String, Object> newIdFields, EntityId<E> newId,
                                        DataElementDefinition childDefinition) {
          return privateCopyEntity(original, newIdFields, newId, childDefinition);          
      }

      
      /**
        * Process a list element before it is deleted
        * @param sourceElement the data element from the client
        * @param targetId the matching persistent entity's id
        */
      protected void aboutToDeleteElement_Account (DataElement sourceElement, EntityId targetId) {
	          // empty
	      }     



    /**
      * Bind a list filter/query
      * @param query the query being used to get the list
      * @param parentEntity the owning entity of the list
      */
    protected void bindListQuery_Account (BindableQuery query, BusinessEntity parentEntity) {
	          // empty
		}





      /**
        * Create the list for a read
        * @param itemList the list being populated
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param elementDef the element definition
        * @param lastInfo
        */
      protected void createList_Account (ItemList<DataElement> itemList, DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition elementDef, ListLastInfo lastInfo) {
          // empty
      }

	      /**
        * Create the list for a read
        * @param itemList the list being populated
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param elementDef the element definition

          @deprecated use version with ListLastInfo */
	      @Deprecated
      protected final void createList_Account (ItemList<DataElement> itemList, DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition elementDef) {
          // empty
      }


      /**
        * Save the list
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param childElementDef the element definition of the child rows
        * @param theList the item list being saved
        */
      protected void saveList_Account (DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition childElementDef, ItemList<DataElement> theList) {
	          // empty
	      }


     /*
      * Methods for handling list Contract
      */

      /**
        * Process a list after it has been read
        * @param targetList the itemList of rows going to the client
        * @param sourceList the complete source list as read
        * @param sourceListParent the owning parent entity (or null if doesn't exist)
        */
      protected void afterPopulateList_Contract (ItemList<DataElement> targetList, SimpleEntityList sourceList,
                                    BusinessEntity sourceListParent) {
          // empty
      }



      protected void copyList_Contract (BusinessEntity originalOwner, BusinessEntity newOwner, Map<String, Object> parentIdFields,
                            ListDefinition listDef) {
            privateCopyList(originalOwner, newOwner, parentIdFields, listDef);
      }



      /**
        * Process a list element after it has been read
        * @param targetElement the data element being populated for the client
        * @param sourceEntity the matching persistent entity
        */
      protected void afterPopulateElement_Contract (DataElement targetElement, BusinessEntity sourceEntity) {
	          // empty
	      }

      /**
        * Process a list element before it will be changed
        * @param sourceElement the data element from the client
        * @param changedDto the changed DTO 
        * @param originalEntity the matching persistent entity
        */
      protected void beforeChangeElement_Contract (DataElement sourceElement, DataTransferObject changedDto, BusinessEntity originalEntity) {
	          // empty
	      }

      /**
        * Process a list element before it will be added
        * @param sourceElement the data element from the client
        * @param newDto the new DTO
        */
      protected void beforeAddElement_Contract (DataElement sourceElement, DataTransferObject newDto) {      
	          // empty
	      }

      /**
        * Process a list element after it has been changed
        * @param sourceElement the data element from the client
        * @param targetEntity the matching persistent entity
        */
      protected void afterChangeElement_Contract (DataElement sourceElement, BusinessEntity targetEntity) {
	          // empty
	      }

      /**
        * Process a list element after it has been added
        * @param sourceElement the data element from the client
        * @param targetEntity the matching persistent entity
        */
      protected void afterAddElement_Contract (DataElement sourceElement, BusinessEntity targetEntity) {      
	          // empty
	      }

      protected <E extends BusinessEntity> E copyEntity_Contract (E original, Map<String, Object> newIdFields, EntityId<E> newId,
                                        DataElementDefinition childDefinition) {
          return privateCopyEntity(original, newIdFields, newId, childDefinition);          
      }

      
      /**
        * Process a list element before it is deleted
        * @param sourceElement the data element from the client
        * @param targetId the matching persistent entity's id
        */
      protected void aboutToDeleteElement_Contract (DataElement sourceElement, EntityId targetId) {
	          // empty
	      }     



    /**
      * Bind a list filter/query
      * @param query the query being used to get the list
      * @param parentEntity the owning entity of the list
      */
    protected void bindListQuery_Contract (BindableQuery query, BusinessEntity parentEntity) {
	          // empty
		}




      /**
        * Process a list after it has been persisted (prior to commit)
        * @param sourceList the itemList of action commands from the client
        * @param entityList the complete entity list as read
        * @param parentEntity the owning parent entity (or null if doesn't exist)
        */
      protected void afterSaveList_Contract (ItemList<DataElement> sourceList, SimpleEntityList entityList,
                                    BusinessEntity parentEntity) {
	          // empty
	      }


     /*
      * Methods for handling list Currency
      */

      /**
        * Process a list after it has been read
        * @param targetList the itemList of rows going to the client
        * @param sourceList the complete source list as read
        * @param sourceListParent the owning parent entity (or null if doesn't exist)
        */
      protected void afterPopulateList_Currency (ItemList<DataElement> targetList, SimpleEntityList sourceList,
                                    BusinessEntity sourceListParent) {
          // empty
      }



      protected void copyList_Currency (BusinessEntity originalOwner, BusinessEntity newOwner, Map<String, Object> parentIdFields,
                            ListDefinition listDef) {
            privateCopyList(originalOwner, newOwner, parentIdFields, listDef);
      }



      /**
        * Process a list element after it has been read
        * @param targetElement the data element being populated for the client
        * @param sourceEntity the matching persistent entity
        */
      protected void afterPopulateElement_Currency (DataElement targetElement, BusinessEntity sourceEntity) {
	          // empty
	      }

      /**
        * Process a list element before it will be changed
        * @param sourceElement the data element from the client
        * @param changedDto the changed DTO 
        * @param originalEntity the matching persistent entity
        */
      protected void beforeChangeElement_Currency (DataElement sourceElement, DataTransferObject changedDto, BusinessEntity originalEntity) {
	          // empty
	      }

      /**
        * Process a list element before it will be added
        * @param sourceElement the data element from the client
        * @param newDto the new DTO
        */
      protected void beforeAddElement_Currency (DataElement sourceElement, DataTransferObject newDto) {      
	          // empty
	      }

      /**
        * Process a list element after it has been changed
        * @param sourceElement the data element from the client
        * @param targetEntity the matching persistent entity
        */
      protected void afterChangeElement_Currency (DataElement sourceElement, BusinessEntity targetEntity) {
	          // empty
	      }

      /**
        * Process a list element after it has been added
        * @param sourceElement the data element from the client
        * @param targetEntity the matching persistent entity
        */
      protected void afterAddElement_Currency (DataElement sourceElement, BusinessEntity targetEntity) {      
	          // empty
	      }

      protected <E extends BusinessEntity> E copyEntity_Currency (E original, Map<String, Object> newIdFields, EntityId<E> newId,
                                        DataElementDefinition childDefinition) {
          return privateCopyEntity(original, newIdFields, newId, childDefinition);          
      }

      
      /**
        * Process a list element before it is deleted
        * @param sourceElement the data element from the client
        * @param targetId the matching persistent entity's id
        */
      protected void aboutToDeleteElement_Currency (DataElement sourceElement, EntityId targetId) {
	          // empty
	      }     



    /**
      * Bind a list filter/query
      * @param query the query being used to get the list
      * @param parentEntity the owning entity of the list
      */
    protected void bindListQuery_Currency (BindableQuery query, BusinessEntity parentEntity) {
	          // empty
		}





      /**
        * Create the list for a read
        * @param itemList the list being populated
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param elementDef the element definition
        * @param lastInfo
        */
      protected void createList_Currency (ItemList<DataElement> itemList, DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition elementDef, ListLastInfo lastInfo) {
          // empty
      }

	      /**
        * Create the list for a read
        * @param itemList the list being populated
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param elementDef the element definition

          @deprecated use version with ListLastInfo */
	      @Deprecated
      protected final void createList_Currency (ItemList<DataElement> itemList, DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition elementDef) {
          // empty
      }


      /**
        * Save the list
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param childElementDef the element definition of the child rows
        * @param theList the item list being saved
        */
      protected void saveList_Currency (DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition childElementDef, ItemList<DataElement> theList) {
	          // empty
	      }


     /*
      * Methods for handling list Division
      */

      /**
        * Process a list after it has been read
        * @param targetList the itemList of rows going to the client
        * @param sourceList the complete source list as read
        * @param sourceListParent the owning parent entity (or null if doesn't exist)
        */
      protected void afterPopulateList_Division (ItemList<DataElement> targetList, SimpleEntityList sourceList,
                                    BusinessEntity sourceListParent) {
          // empty
      }



      protected void copyList_Division (BusinessEntity originalOwner, BusinessEntity newOwner, Map<String, Object> parentIdFields,
                            ListDefinition listDef) {
            privateCopyList(originalOwner, newOwner, parentIdFields, listDef);
      }



      /**
        * Process a list element after it has been read
        * @param targetElement the data element being populated for the client
        * @param sourceEntity the matching persistent entity
        */
      protected void afterPopulateElement_Division (DataElement targetElement, BusinessEntity sourceEntity) {
	          // empty
	      }

      /**
        * Process a list element before it will be changed
        * @param sourceElement the data element from the client
        * @param changedDto the changed DTO 
        * @param originalEntity the matching persistent entity
        */
      protected void beforeChangeElement_Division (DataElement sourceElement, DataTransferObject changedDto, BusinessEntity originalEntity) {
	          // empty
	      }

      /**
        * Process a list element before it will be added
        * @param sourceElement the data element from the client
        * @param newDto the new DTO
        */
      protected void beforeAddElement_Division (DataElement sourceElement, DataTransferObject newDto) {      
	          // empty
	      }

      /**
        * Process a list element after it has been changed
        * @param sourceElement the data element from the client
        * @param targetEntity the matching persistent entity
        */
      protected void afterChangeElement_Division (DataElement sourceElement, BusinessEntity targetEntity) {
	          // empty
	      }

      /**
        * Process a list element after it has been added
        * @param sourceElement the data element from the client
        * @param targetEntity the matching persistent entity
        */
      protected void afterAddElement_Division (DataElement sourceElement, BusinessEntity targetEntity) {      
	          // empty
	      }

      protected <E extends BusinessEntity> E copyEntity_Division (E original, Map<String, Object> newIdFields, EntityId<E> newId,
                                        DataElementDefinition childDefinition) {
          return privateCopyEntity(original, newIdFields, newId, childDefinition);          
      }

      
      /**
        * Process a list element before it is deleted
        * @param sourceElement the data element from the client
        * @param targetId the matching persistent entity's id
        */
      protected void aboutToDeleteElement_Division (DataElement sourceElement, EntityId targetId) {
	          // empty
	      }     



    /**
      * Bind a list filter/query
      * @param query the query being used to get the list
      * @param parentEntity the owning entity of the list
      */
    protected void bindListQuery_Division (BindableQuery query, BusinessEntity parentEntity) {
	          // empty
		}





      /**
        * Create the list for a read
        * @param itemList the list being populated
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param elementDef the element definition
        * @param lastInfo
        */
      protected void createList_Division (ItemList<DataElement> itemList, DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition elementDef, ListLastInfo lastInfo) {
          // empty
      }

	      /**
        * Create the list for a read
        * @param itemList the list being populated
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param elementDef the element definition

          @deprecated use version with ListLastInfo */
	      @Deprecated
      protected final void createList_Division (ItemList<DataElement> itemList, DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition elementDef) {
          // empty
      }


      /**
        * Save the list
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param childElementDef the element definition of the child rows
        * @param theList the item list being saved
        */
      protected void saveList_Division (DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition childElementDef, ItemList<DataElement> theList) {
	          // empty
	      }


     /*
      * Methods for handling list FinancialDocument
      */

      /**
        * Process a list after it has been read
        * @param targetList the itemList of rows going to the client
        * @param sourceList the complete source list as read
        * @param sourceListParent the owning parent entity (or null if doesn't exist)
        */
      protected void afterPopulateList_FinancialDocument (ItemList<DataElement> targetList, SimpleEntityList sourceList,
                                    BusinessEntity sourceListParent) {
          // empty
      }



      protected void copyList_FinancialDocument (BusinessEntity originalOwner, BusinessEntity newOwner, Map<String, Object> parentIdFields,
                            ListDefinition listDef) {
            privateCopyList(originalOwner, newOwner, parentIdFields, listDef);
      }



      /**
        * Process a list element after it has been read
        * @param targetElement the data element being populated for the client
        * @param sourceEntity the matching persistent entity
        */
      protected void afterPopulateElement_FinancialDocument (DataElement targetElement, BusinessEntity sourceEntity) {
	          // empty
	      }

      /**
        * Process a list element before it will be changed
        * @param sourceElement the data element from the client
        * @param changedDto the changed DTO 
        * @param originalEntity the matching persistent entity
        */
      protected void beforeChangeElement_FinancialDocument (DataElement sourceElement, DataTransferObject changedDto, BusinessEntity originalEntity) {
	          // empty
	      }

      /**
        * Process a list element before it will be added
        * @param sourceElement the data element from the client
        * @param newDto the new DTO
        */
      protected void beforeAddElement_FinancialDocument (DataElement sourceElement, DataTransferObject newDto) {      
	          // empty
	      }

      /**
        * Process a list element after it has been changed
        * @param sourceElement the data element from the client
        * @param targetEntity the matching persistent entity
        */
      protected void afterChangeElement_FinancialDocument (DataElement sourceElement, BusinessEntity targetEntity) {
	          // empty
	      }

      /**
        * Process a list element after it has been added
        * @param sourceElement the data element from the client
        * @param targetEntity the matching persistent entity
        */
      protected void afterAddElement_FinancialDocument (DataElement sourceElement, BusinessEntity targetEntity) {      
	          // empty
	      }

      protected <E extends BusinessEntity> E copyEntity_FinancialDocument (E original, Map<String, Object> newIdFields, EntityId<E> newId,
                                        DataElementDefinition childDefinition) {
          return privateCopyEntity(original, newIdFields, newId, childDefinition);          
      }

      
      /**
        * Process a list element before it is deleted
        * @param sourceElement the data element from the client
        * @param targetId the matching persistent entity's id
        */
      protected void aboutToDeleteElement_FinancialDocument (DataElement sourceElement, EntityId targetId) {
	          // empty
	      }     



    /**
      * Bind a list filter/query
      * @param query the query being used to get the list
      * @param parentEntity the owning entity of the list
      */
    protected void bindListQuery_FinancialDocument (BindableQuery query, BusinessEntity parentEntity) {
	          // empty
		}





      /**
        * Create the list for a read
        * @param itemList the list being populated
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param elementDef the element definition
        * @param lastInfo
        */
      protected void createList_FinancialDocument (ItemList<DataElement> itemList, DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition elementDef, ListLastInfo lastInfo) {
          // empty
      }

	      /**
        * Create the list for a read
        * @param itemList the list being populated
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param elementDef the element definition

          @deprecated use version with ListLastInfo */
	      @Deprecated
      protected final void createList_FinancialDocument (ItemList<DataElement> itemList, DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition elementDef) {
          // empty
      }


      /**
        * Save the list
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param childElementDef the element definition of the child rows
        * @param theList the item list being saved
        */
      protected void saveList_FinancialDocument (DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition childElementDef, ItemList<DataElement> theList) {
	          // empty
	      }


     /*
      * Methods for handling list MerchantLdgAcct
      */

      /**
        * Process a list after it has been read
        * @param targetList the itemList of rows going to the client
        * @param sourceList the complete source list as read
        * @param sourceListParent the owning parent entity (or null if doesn't exist)
        */
      protected void afterPopulateList_MerchantLdgAcct (ItemList<DataElement> targetList, SimpleEntityList sourceList,
                                    BusinessEntity sourceListParent) {
          // empty
      }



      protected void copyList_MerchantLdgAcct (BusinessEntity originalOwner, BusinessEntity newOwner, Map<String, Object> parentIdFields,
                            ListDefinition listDef) {
            privateCopyList(originalOwner, newOwner, parentIdFields, listDef);
      }



      /**
        * Process a list element after it has been read
        * @param targetElement the data element being populated for the client
        * @param sourceEntity the matching persistent entity
        */
      protected void afterPopulateElement_MerchantLdgAcct (DataElement targetElement, BusinessEntity sourceEntity) {
	          // empty
	      }

      /**
        * Process a list element before it will be changed
        * @param sourceElement the data element from the client
        * @param changedDto the changed DTO 
        * @param originalEntity the matching persistent entity
        */
      protected void beforeChangeElement_MerchantLdgAcct (DataElement sourceElement, DataTransferObject changedDto, BusinessEntity originalEntity) {
	          // empty
	      }

      /**
        * Process a list element before it will be added
        * @param sourceElement the data element from the client
        * @param newDto the new DTO
        */
      protected void beforeAddElement_MerchantLdgAcct (DataElement sourceElement, DataTransferObject newDto) {      
	          // empty
	      }

      /**
        * Process a list element after it has been changed
        * @param sourceElement the data element from the client
        * @param targetEntity the matching persistent entity
        */
      protected void afterChangeElement_MerchantLdgAcct (DataElement sourceElement, BusinessEntity targetEntity) {
	          // empty
	      }

      /**
        * Process a list element after it has been added
        * @param sourceElement the data element from the client
        * @param targetEntity the matching persistent entity
        */
      protected void afterAddElement_MerchantLdgAcct (DataElement sourceElement, BusinessEntity targetEntity) {      
	          // empty
	      }

      protected <E extends BusinessEntity> E copyEntity_MerchantLdgAcct (E original, Map<String, Object> newIdFields, EntityId<E> newId,
                                        DataElementDefinition childDefinition) {
          return privateCopyEntity(original, newIdFields, newId, childDefinition);          
      }

      
      /**
        * Process a list element before it is deleted
        * @param sourceElement the data element from the client
        * @param targetId the matching persistent entity's id
        */
      protected void aboutToDeleteElement_MerchantLdgAcct (DataElement sourceElement, EntityId targetId) {
	          // empty
	      }     



    /**
      * Bind a list filter/query
      * @param query the query being used to get the list
      * @param parentEntity the owning entity of the list
      */
    protected void bindListQuery_MerchantLdgAcct (BindableQuery query, BusinessEntity parentEntity) {
	          // empty
		}





      /**
        * Create the list for a read
        * @param itemList the list being populated
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param elementDef the element definition
        * @param lastInfo
        */
      protected void createList_MerchantLdgAcct (ItemList<DataElement> itemList, DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition elementDef, ListLastInfo lastInfo) {
          // empty
      }

	      /**
        * Create the list for a read
        * @param itemList the list being populated
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param elementDef the element definition

          @deprecated use version with ListLastInfo */
	      @Deprecated
      protected final void createList_MerchantLdgAcct (ItemList<DataElement> itemList, DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition elementDef) {
          // empty
      }


      /**
        * Save the list
        * @param sourceParentElement the parent data element, already read
        * @param sourceParentEntity the parent entity, if it exists (otherwise null)
        * @param childElementDef the element definition of the child rows
        * @param theList the item list being saved
        */
      protected void saveList_MerchantLdgAcct (DataElement sourceParentElement, BusinessEntity sourceParentEntity, DataElementDefinition childElementDef, ItemList<DataElement> theList) {
	          // empty
	      }


}       
